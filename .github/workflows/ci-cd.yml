name: CI/CD to Portainer (API)

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write

env:
  IMAGE: ghcr.io/aunghein-dev/backend_catchya

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ github.sha }}
            ${{ env.IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Render compose with new tag
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base jq
          export IMAGE_TAG=${GITHUB_SHA}
          envsubst < docker-compose.prod.yml > deploy-compose.yml
          echo "---- deploy-compose.yml ----"
          sed -n '1,200p' deploy-compose.yml

      - name: Get Portainer JWT (robust)
        id: auth
        env:
          URL: ${{ secrets.PORTAINER_URL }}
          USERNAME: ${{ secrets.PORTAINER_USERNAME }}
          PASSWORD: ${{ secrets.PORTAINER_PASSWORD }}
          INSECURE_TLS: ${{ vars.PORTAINER_INSECURE_TLS }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          # Build JSON safely (handles special characters)
          BODY=$(jq -n --arg u "$USERNAME" --arg p "$PASSWORD" '{Username:$u, Password:$p}')

          # Follow redirects; allow -k only if INSECURE_TLS=1
          CURL_OPTS="-sSL"
          if [ "$INSECURE_TLS" = "1" ]; then CURL_OPTS="$CURL_OPTS -k"; fi

          HTTP_CODE=$(curl $CURL_OPTS -o resp.json -w "%{http_code}" \
            -X POST "$URL/api/auth" \
            -H "Content-Type: application/json" \
            --data "$BODY")

          echo "Auth HTTP_CODE=$HTTP_CODE"
          echo "Auth response (first 200 chars):"
          head -c 200 resp.json || true
          echo

          if [ "$HTTP_CODE" -lt 200 ] || [ "$HTTP_CODE" -ge 300 ]; then
            echo "::error::Portainer auth failed (HTTP $HTTP_CODE). Check PORTAINER_URL, HTTPS, and creds."
            exit 1
          fi

          TOKEN=$(jq -r '.jwt // empty' < resp.json)
          if [ -z "$TOKEN" ]; then
            echo "::error::No .jwt in /api/auth response (likely HTML/redirect). Ensure /api is reachable at this URL."
            exit 1
          fi
          echo "token=$TOKEN" >> "$GITHUB_OUTPUT"
      

      - name: Update stack (auto-discover & correct path)
        env:
          URL: ${{ secrets.PORTAINER_URL }}
          INSECURE_TLS: ${{ vars.PORTAINER_INSECURE_TLS }}
          STACK_NAME: ${{ vars.PORTAINER_STACK_NAME }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          # curl opts: follow redirects; allow -k only if self-signed
          CURL_OPTS="-sSL"
          if [ "$INSECURE_TLS" = "1" ]; then CURL_OPTS="$CURL_OPTS -k"; fi

          # 1) Who am I? Get token from previous step
          TOKEN="${{ steps.auth.outputs.token }}"
          if [ -z "$TOKEN" ]; then echo "::error::Missing JWT token"; exit 1; fi

          # 2) List stacks and auto-discover the one we want
          echo "Discovering stacks..."
          curl $CURL_OPTS -H "Authorization: Bearer $TOKEN" "$URL/api/stacks" -o stacks.json
          echo "Available stacks (Id, Name, EndpointId):"
          jq '.[] | {Id, Name, EndpointId}' stacks.json

          if [ -z "$STACK_NAME" ]; then
            echo "::error::PORTAINER_STACK_NAME variable is not set. Please set it to your stack's name in repo Variables."
            exit 1
          fi

          STACK_ID=$(jq -r --arg n "$STACK_NAME" '.[] | select(.Name==$n) | .Id' stacks.json)
          ENDPOINT_ID=$(jq -r --arg n "$STACK_NAME" '.[] | select(.Name==$n) | .EndpointId' stacks.json)
          if [ -z "$STACK_ID" ] || [ "$STACK_ID" = "null" ]; then
            echo "::error::Could not find a stack named '$STACK_NAME'. Check the printed list above."
            exit 1
          fi
          if [ -z "$ENDPOINT_ID" ] || [ "$ENDPOINT_ID" = "null" ]; then
            echo "::error::Stack found but EndpointId missing. Check your Portainer setup."
            exit 1
          fi
          echo "Using STACK_ID=$STACK_ID ENDPOINT_ID=$ENDPOINT_ID"

          # 3) Inspect the stack to see if it's Git-based
          curl $CURL_OPTS -H "Authorization: Bearer $TOKEN" "$URL/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" -o stack.json
          IS_GIT=$(jq -r 'if .GitConfig then "1" else "0" end' stack.json)
          echo "Git-based stack? $IS_GIT"

          if [ "$IS_GIT" = "1" ]; then
            echo "Stack is Git-based. Redeploying from Git…"
            # IMPORTANT: For Git stacks, Portainer ignores stackFileContent.
            # You must commit the tag bump to the repo (the workflow already built the image).
            # Then ask Portainer to redeploy from Git:
            HTTP_CODE=$(curl $CURL_OPTS -o redeploy.json -w "%{http_code}" \
              -X POST "$URL/api/stacks/$STACK_ID/git/redeploy?endpointId=$ENDPOINT_ID" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              --data '{}')
            echo "git/redeploy HTTP_CODE=$HTTP_CODE"
            head -c 200 redeploy.json || true
            echo
            [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ] || (echo "::error::Git redeploy failed." && exit 1)
          else
            echo "Stack is file/editor based. Updating stack content…"
            BODY=$(jq -Rs '{stackFileContent: ., prune: true}' < deploy-compose.yml)
            HTTP_CODE=$(curl $CURL_OPTS -o update.json -w "%{http_code}" \
              -X PUT "$URL/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              --data-raw "$BODY")
            echo "update HTTP_CODE=$HTTP_CODE"
            head -c 200 update.json || true
            echo
            [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ] || (echo "::error::Stack update failed." && exit 1)
          fi

          echo "Stack updated."
